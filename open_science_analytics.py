# -*- coding: utf-8 -*-
"""open_science_analytics.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1YGXk1hcvUVIUSe7HUpravF4qJBWXQbLP
"""

# Data manipulation
import pandas as pd
import numpy as np
import math

# Data viz
import seaborn as sns
import matplotlib.pyplot as plt

# Preferences
pd.set_option("display.max_columns", None)

from google.colab import drive
drive.mount('/content/drive')

# Commented out IPython magic to ensure Python compatibility.
from google.colab import drive
drive.mount('/content/drive')
# %cd '/content/drive/MyDrive/Research/Open Science/Data'

# Read in the data
#raw_data = pd.read_csv("../Data/Open Science_January 21, 2025_16.44.csv")
raw_data = pd.read_csv("Open Science_January 21, 2025_16.44.csv")
raw_data.columns = raw_data.iloc[0, :] # Replace col names with first row
raw_data = raw_data.iloc[2:, :].reset_index(drop=True) # Remove metadata rows

# Use data-dict to make cols easier to work with
#data_dict = pd.read_csv("../Data/data_dict_2.19.25.csv")
data_dict = pd.read_csv("data_dict_2.19.25.csv")
df = raw_data.copy()
data_dict = dict(zip(data_dict['FullName'], data_dict['ShortName']))
df.columns = [data_dict.get(val) for val in list(df)]

# CLEAN UP DF
df = df.dropna(subset=['pubs_authored'])
df['pubs_authored'] = df['pubs_authored'].astype(int)
df = df[df['pubs_authored']<200].reset_index(drop=True)

# Drop unnecessary cols
drop_cols = [
    'StartDate',
 'EndDate',
 'ResponseType',
 'Progress',
 'Duration',
 'Finished',
 'RecordedDate',
 'ResponseID',
 'DistributionChannel',
 'UserLanguage',
 'RecaptchaScore',
 'consent',
 'include_in_drawing'
]
plot_df = df.drop(drop_cols, axis=1)

# Prep data
col_val = 'ba_identify'
temp_plot = plot_df[f'{col_val}'].value_counts().reset_index()
temp_plot[f'{col_val}'] = [val.title().replace(" ", "\n").replace("-", "\n") for val in temp_plot[f'{col_val}']]

fig, ax = plt.subplots(figsize=(8, 4))
sns.barplot(data=temp_plot, x=f'{col_val}', y='count', color='k')
plt.ylabel("Number of Respondents", fontsize=18, labelpad=12)
plt.xlabel("Self-Identify Type of Behavior Analyst", fontsize=18, labelpad=12),
sns.despine(top=True, right=True)
plt.show()

# Prep data
col_val = 'primary_work_setting'
temp_plot = plot_df[f'{col_val}'].value_counts().reset_index()
temp_plot[f'{col_val}'] = [val.title().replace(" ", "\n").replace("-", "\n") for val in temp_plot[f'{col_val}']]

fig, ax = plt.subplots(figsize=(8, 4))
sns.barplot(data=temp_plot, x=f'{col_val}', y='count', color='k')
plt.ylabel("Number of Respondents", fontsize=18, labelpad=12)
plt.xlabel("Work Environment", fontsize=18, labelpad=12),
sns.despine(top=True, right=True)
plt.show()

# Prep data
col_val = 'current_position'
temp_plot = plot_df[f'{col_val}'].value_counts().reset_index()
temp_plot[f'{col_val}'] = [val.title().replace(" ", "\n").replace("-", "\n") for val in temp_plot[f'{col_val}']]

fig, ax = plt.subplots(figsize=(8, 4))
sns.barplot(data=temp_plot, x=f'{col_val}', y='count', color='k')
plt.ylabel("Number of Respondents", fontsize=18, labelpad=12)
plt.xlabel("Position", fontsize=18, labelpad=12),
sns.despine(top=True, right=True)
plt.show()

# Define the column names and labels for the plots
columns = [
    ('ba_identify', 'Self-Identify Type of Behavior Analyst'),
    ('primary_work_setting', 'Work Environment'),
    ('current_position', 'Current Position')
]

# Create a 1 column, 3 row subplot
fig, axes = plt.subplots(nrows=3, ncols=1, figsize=(8.5, 11), constrained_layout=False)

# Adjust space between subplots
fig.subplots_adjust(hspace=0.5)

# Loop through each column and corresponding subplot
for ax, (col_val, xlabel) in zip(axes, columns):
    temp_plot = plot_df[f'{col_val}'].value_counts().reset_index()
    temp_plot[f'{col_val}'] = [val.title().replace("(Please Explain)", "").replace(" ", "\n").replace("Scientist-Practitioner", "Scientist-\nPractitioner") for val in temp_plot[f'{col_val}']]
    sns.barplot(data=temp_plot, x=f'{col_val}', y='count', color='k', ax=ax)
    ax.set_ylabel("", fontsize=20, labelpad=12)
    ax.set_xlabel(xlabel, fontsize=16, labelpad=12)
    sns.despine(ax=ax, top=True, right=True)
fig.text(0.05, 0.5, "Number of Respondents", va='center', ha='center', rotation='vertical', fontsize=30)

plt.savefig("demographics.png")
plt.show()

# Prep data
temp_df = plot_df[[val for val in list(plot_df) if "familiar" in val]]
temp_df.columns = ["Preprints", "Independent\nRepositories", "Scholarly\nWork", "Open Data", "Independent\nStudy\nRegistries"]
temp_df = temp_df.melt().dropna().reset_index(drop=True)
temp_df['value'] = temp_df['value'].astype(int)

# Create plot
fig, ax = plt.subplots(figsize=(8, 4))

# Barplot with white bars (color='white')
bar_plot = sns.barplot(data=temp_df, x='variable', y='value', color='white', errorbar='ci', capsize=0.1, errwidth=1)

# Add black edges to bars
for patch in bar_plot.patches:
    patch.set_edgecolor('black')
    patch.set_linewidth(1)

# Swarmplot with black markers
sns.swarmplot(data=temp_df, x='variable', y='value', color='black', alpha=0.8)

# Axis labels and ticks
plt.ylabel("Familiarity Score", fontsize=18, labelpad=12)
plt.yticks(
    ticks=[1, 3, 5, 7, 9],
    labels=['Not at all familiar', 'Slightly familiar', 'Somewhat familiar', 'Moderately familiar', 'Extremely familiar']
)
plt.xlabel("Open Science Practice", fontsize=18, labelpad=12)

# Clean up extra borders
sns.despine(top=True, right=True)

# Save & show
plt.savefig("familiarity.png", dpi=300, bbox_inches="tight")
plt.show()

temp_df = plot_df[[val for val in list(plot_df) if "barrier_" in val]]
temp_df.columns = [
    "Lack of\nKnowledge\nOS Practices",
    "Too Time\nConsuming",
    "I Don't\nWant to Share",
    "Lack of\nKnowledge\nSuitable\nRegistries",
    "Not Relevant\nto Work",
    "Collaborators\nOppose",
    "No Benefit"
]
temp_df = temp_df.melt().dropna().reset_index(drop=True)

# Prep data
temp_df['value'] = temp_df['value'].astype(int)


# Reorder categories based on mean values
mean_order = temp_df.groupby('variable')['value'].mean().sort_values()
temp_df['variable'] = pd.Categorical(temp_df['variable'], categories=mean_order.index, ordered=True)

fig, ax = plt.subplots(figsize=(12, 6))

# Barplot with white fill
bar_plot = sns.barplot(data=temp_df, x='variable', y='value', color='white', errorbar='ci', capsize=0.1, errwidth=1)

# Add black edges to bars
for patch in bar_plot.patches:
    patch.set_edgecolor('black')
    patch.set_linewidth(1)

sns.swarmplot(data=temp_df, x='variable', y='value', color='black', alpha=0.5)
plt.ylabel("Barrier Ranking", fontsize=30, labelpad=12)
plt.yticks(
    ticks=[1, 7],
    labels=['Greatest Barrier', 'Least Barrier']
)
plt.xlabel("Barrier Type", fontsize=26, labelpad=12),
sns.despine(top=True, right=True)
#plt.savefig("barriers.png")
plt.savefig("barriers.png",dpi=300, bbox_inches = "tight")
plt.show()

temp_df = plot_df[[val for val in list(plot_df) if "your_opinion" in val]+ ['current_position']]
senior_career = ['Associate Professor', 'Professor', 'Industry Researcher']
temp_df['current_position'] = ["More Senior" if val in senior_career else "Early Career" for val in temp_df['current_position']]
temp_df.columns = [
    "Share Preprint",
    "Preregistration",
    "Data Sharing",
    "Materials Sharing",
    "current_position"
]
temp_df = temp_df.melt(id_vars=['current_position']).dropna().reset_index(drop=True)

# Swap out Opinion label for numeric
swap_dict = {
    'Very much in favor': 5,
    'In favor': 4,
    'Neither in favor nor against (i.e., neutral)': 3,
    'Against': 2,
    'Very much against': 1,
    'No opinion (i.e., I did not know anything about sharing data before this survey': -1,
}
temp_df['value'] = temp_df['value'].map(swap_dict)
temp_df = temp_df.dropna(subset=['value'])
temp_df['value'] = temp_df['value'].astype(int)
temp_df

# Filter out rows where 'value' is -1 and count the "No opinion" respondents
no_opinion_counts = temp_df[temp_df['value'] == -1].groupby('variable').size()
temp_df_filtered = temp_df[temp_df['value'] != -1]

# Get the unique variables
unique_variables = temp_df_filtered['variable'].unique()

# Calculate rows and columns for a 2x2 grid
num_plots = len(unique_variables)
rows = math.ceil(num_plots / 2)
cols = 2

# Create subplots
fig, axes = plt.subplots(nrows=rows, ncols=cols, figsize=(7, 6), sharey=True)
axes = axes.flatten()

# Adjust space between subplots
fig.subplots_adjust(hspace=0.8)  # Increased vertical space

# Plot each variable in a separate subplot
for idx, (ax, variable) in enumerate(zip(axes, unique_variables)):
    # Subset the data for the current variable
    subset = temp_df_filtered[temp_df_filtered['variable'] == variable]

    # Create a barplot
    sns.barplot(data=subset, x='current_position', y='value', ax=ax,
                errorbar='ci', capsize=0.1, errwidth=1,
                color='white', edgecolor='black', linewidth=1.5)
    sns.swarmplot(data=subset, x='current_position', y='value', ax=ax, color='black', alpha=0.5)

    # Set axis labels and title
    ax.set_title(variable, fontsize=14)
    ax.set_ylabel("", fontsize=12)
    ax.set_ylim(0.5, 5.5)
    ax.set_yticks([1, 2, 3, 4, 5])
    ax.set_yticklabels(['Very Much Against', 'Against', 'Neutral', 'In Favor', 'Very Much In Favor'], fontsize=10)
    ax.set_xlabel("", fontsize=12)
    sns.despine(top=True, right=True)

# Remove any empty subplots
for i in range(num_plots, len(axes)):
    fig.delaxes(axes[i])

# Add shared labels
fig.text(0.625, -0.05, "Current Position", ha='center', fontsize=30)
fig.text(-0.05, 0.5, "Opinion Score", va='center', ha='center', rotation='vertical', fontsize=26)

plt.tight_layout()
plt.savefig("opinion_by_career.png")
plt.show()

#export as CSV
df.to_csv('og_df.csv',index=False)

"""#Create a table with calculated percentages."""

# function to get percentages
def get_percentage_respondents(df, col):
  # Calculate the count of respondents for each category
  category_counts = df[col].value_counts()
  #
  total_missing = df[col].isna().sum()

  # Calculate the total number of respondents
  total_respondents = len(df)

  # Calculate the percentage of respondents for each
  category_percentages = (category_counts / (total_respondents - total_missing)) * 100

  category_percentages = category_percentages.reset_index()

  category_percentages['question_name'] = list(category_percentages)[0]
  category_percentages.columns = ['options', 'count', 'question_name']

  return category_percentages

#specifying specific columns instead of whole data frame
df_percents = df[['experience_os_practices', 'familiarity_preprint',
'familiarity_ind_repo', 'familiarity_scholarly_work', 'familiarity_open_data',
'familiarity_inde_study_registry', 'your_opinion_share_preprint',
'knowledge_preprints_ind_repo', 'pubs_ind_repo_preprint', 'year_first_preprint_share',
'recent_pub_a_preprint', 'reasons_hesitate_preprint', 'reasons_hesitate_preprint_other',
'est_percent_colleagues_share', 'your_opinion_prereg', 'knowledge_prereg',
'pubs_prereg', 'year_first_prereg', 'reasons_hesitate_prereg','reasons_hesitate_prereg_other',
'recent_pub_prereg', 'est_percent_colleagues_prereg', 'your_opinion_data_share',
'knowledge_ind_repo', 'pubs_ind_repo_shared', 'year_first_ind_repo', 'reasons_hesitate_ind_repo',
'reasons_hesitate_ind_repo_other', 'recent_pub_ind_repo', 'est_percent_colleagues_ind_repo',
'your_opinion_share_materials', 'pubs_share_materials', 'year_first_share_materials',
'how_share_materials',  'how_share_materials_other', 'reasons_hesitate_share_materials',
'reasons_hesitate_share_materials_other', 'recent_pub_share_materials',
'est_percent_colleagues_share_materials', 'barrier_knowledge_os_practices',
'barrier_time_consuming_support', 'barrier_researchers_no_share',
'barrier_knowledge_registries', 'barrier_not_relevant', 'barrier_collaborator_opposition',
'barrier_no_benefit', 'barriers_experienced', 'increase_knowledge_include_grad_training',
'increase_knowledge_support_superiors', 'increase_knowledge_workshops',
'increase_knowledge_webinars', 'increase_knowledge_article_tutorials',
'increase_knowledge_resource_access', 'rank_impact_include_grad_training',
'rank_impact_support_superiors', 'rank_impact_workshops', 'rank_impact_webinars',
'rank_impact_article_tutorials', 'rank_impact_resource_access',
'sources_you_learned_from', 'sources_you_learned_from_other', 'how_like_learn_more',
'how_like_learn_more_other', 'plan_to_post_preprint', 'plan_to_read_preprint',
'plan_make_data_open', 'plan_access_open_data', 'plan_to_prereg', 'plan_read_prereg',
                  ]]

percent_df = pd.DataFrame()

for col in list(df_percents):
  data_perc = get_percentage_respondents(df, col)
  percent_df = pd.concat([percent_df, data_perc],axis = 0)
 # print(list(data_perc), '\n')
#df_percents.iloc[:,:3]

#export as CSV
percent_df.to_csv('percentage_results.csv',index=False)